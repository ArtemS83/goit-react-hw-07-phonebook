{"version":3,"sources":["components/Section/Section.module.scss","components/ContactsInputForm/ContactsInputForm.module.scss","components/Button/Button.module.scss","components/Filter/Filter.module.scss","components/Section/Section.jsx","redux/contacts/contacts-actions.js","redux/contacts/contacts-selectors.js","components/Button/Button.jsx","components/ContactsInputForm/ContactsInputForm.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.jsx","components/Contacts/Contacts.jsx","components/Notification/Notification.jsx","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","Section","title","children","className","style","section","card","defaultProps","addContact","createAction","name","number","payload","id","uuid","filterContacts","deleteContact","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","normalizedFilter","toLowerCase","contact","includes","Button","type","onDelete","buttonButton","button","onClick","ContactsInputForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","handleInputChange","target","value","form","onSubmit","e","preventDefault","normalizedName","trim","find","swal","alert","label","placeholder","onChange","Filter","text","input","useStyles","createUseStyles","item","display","alignItems","marginBottom","fontSize","fontWeight","marginRight","marginLeft","color","ContactItem","classes","list","paddingLeft","Contacts","visibleContacts","map","marginTop","Notification","message","App","length","createReducer","action","combineReducers","contactsPersistConfig","key","version","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.06a81878.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__8YGtp\",\"card\":\"Section_card__X1GLj\",\"title\":\"Section_title__3JUyU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactsInputForm_form__1u-Ji\",\"label\":\"ContactsInputForm_label__1Y9Dn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2uKbi\",\"buttonButton\":\"Button_buttonButton__3dBqt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Filter_title__3X_lX\",\"input\":\"Filter_input__3n34T\"};","import PropTypes from 'prop-types';\r\nimport style from './Section.module.scss';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <div className={style.section}>\r\n      <div className={style.card}>\r\n        <h2 className={style.title}>{title}</h2>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSection.defaultProps = {\r\n  title: '',\r\n  children: [],\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\nexport default Section;\r\n","import { createAction } from '@reduxjs/toolkit';\nimport { v4 as uuid } from 'uuid';\n\nexport const addContact = createAction('contacts/add', (name, number) => ({\n  payload: {\n    id: uuid(),\n    name,\n    number,\n  },\n}));\n// export const addContact = createAction('contacts/add');\nexport const filterContacts = createAction('contacts/filter');\nexport const deleteContact = createAction('contacts/delete');\n\n// export const addContact = contact => ({\n//   type: ADD_CONTACTS,\n//   payload: {\n//     id: uuid(),\n//     name: contact.name,\n//     number: contact.number,\n//   },\n// });\n\n// export const deleteContact = contactId => ({\n//   type: DELETE_CONTACTS,\n//   payload: contactId,\n// });\n\n// export const filterContacts = value => ({\n//   type: FILTER_CONTACTS,\n//   payload: value,\n// });\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n};\n// const contacts = useSelector(state => state.contacts.items);\n// const filter = useSelector(state => state.contacts.filter);\n\n// const normalizedFilter = filter.toLowerCase();\n// const visibleContacts = contacts.filter(contact =>\n//   contact.name.toLowerCase().includes(normalizedFilter),\n// );\n","import PropTypes from 'prop-types';\r\nimport style from './Button.module.scss';\r\n\r\nconst Button = ({ title, type, onDelete }) => {\r\n  return (\r\n    <button\r\n      className={type === 'button' ? style.buttonButton : style.button}\r\n      type={type}\r\n      onClick={onDelete}\r\n    >\r\n      {title}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.defaultProps = {\r\n  title: 'button',\r\n  type: 'button',\r\n  // id: '',\r\n  onDelete: () => {},\r\n};\r\n\r\nButton.propTypes = {\r\n  title: PropTypes.string,\r\n  type: PropTypes.string,\r\n  // id: PropTypes.string,\r\n  onDelete: PropTypes.func,\r\n};\r\n\r\nexport default Button;\r\n","import { useState } from 'react';\n// import { connect } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contacts-actions';\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\n// import PropTypes from 'prop-types';\n// import { v4 as uuid } from 'uuid';\nimport swal from 'sweetalert';\nimport Button from '../Button';\nimport style from './ContactsInputForm.module.scss';\n\n//====================ContactsInputForm REDUX-HOOKS ===============//\n\nconst ContactsInputForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n  // const contacts = useSelector(state => state.contacts.items);\n  const dispatch = useDispatch();\n\n  const handleInputChange = ({ target }) => {\n    const { value, name } = target;\n    name === 'name' ? setName(value) : setNumber(value);\n  };\n\n  const handleAddContact = e => {\n    e.preventDefault();\n\n    if (!number || !name) {\n      alert(`Name or Number not entered `);\n      return;\n    }\n\n    const normalizedName = name.toLowerCase().trim();\n    const isExistingUser = contacts.find(\n      contact => contact.name.toLowerCase() === normalizedName,\n    );\n\n    if (isExistingUser) {\n      // alert(`${name} is already in contacts`);\n      swal('Warning!', `${name} is already in contacts!`, 'warning');\n      return;\n    }\n    // const newContact = {\n    //   id: uuid(),\n    //   name,\n    //   number,\n    // };\n    // dispatch(addContact(newContact));\n    dispatch(addContact(name, number));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={style.form} onSubmit={handleAddContact}>\n      <label className={style.label}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Enter contact\"\n          onChange={handleInputChange}\n        />\n      </label>\n      <label className={style.label}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          placeholder=\"Enter number phone\"\n          onChange={handleInputChange}\n        />\n      </label>\n      <Button title=\"Add contact\" type=\"submit\" />\n    </form>\n  );\n};\n\n// ContactsInputForm.propTypes = {\n//   onSubmitForm: PropTypes.func.isRequired,\n//   contacts: PropTypes.array.isRequired,\n// };\n\nexport default ContactsInputForm;\n\n//=====================REDUX-{ connect } ===============//\n\n// const ContactsInputForm = ({ contacts, onSubmitForm }) => {\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n\n//   const handleInputChange = ({ target }) => {\n//     const { value, name } = target;\n//     name === 'name' ? setName(value) : setNumber(value);\n//   };\n\n//   const handleAddContact = e => {\n//     e.preventDefault();\n//     if (!number || !name) {\n//       alert(`Name or Number not entered `);\n//       return;\n//     }\n\n//     const normalizedName = name.toLowerCase().trim();\n//     const isExistingUser = contacts.find(\n//       contact => contact.name.toLowerCase() === normalizedName,\n//     );\n\n//     if (isExistingUser) {\n//       alert(`${name} is already in contacts`);\n//       return;\n//     }\n//     // const newContact = {\n//     //   id: uuid(),\n//     //   name,\n//     //   number,\n//     // };\n//     // onSubmitForm(newContact);\n\n//     onSubmitForm({ name, number });\n//     setName('');\n//     setNumber('');\n//   };\n\n//   return (\n//     <form className={style.form} onSubmit={handleAddContact}>\n//       <label className={style.label}>\n//         Name\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           value={name}\n//           placeholder=\"Enter contact\"\n//           onChange={handleInputChange}\n//         />\n//       </label>\n//       <label className={style.label}>\n//         Number\n//         <input\n//           type=\"tel\"\n//           name=\"number\"\n//           value={number}\n//           placeholder=\"Enter number phone\"\n//           onChange={handleInputChange}\n//         />\n//       </label>\n//       <Button title=\"Add contact\" type=\"submit\" />\n//     </form>\n//   );\n// };\n\n// ContactsInputForm.propTypes = {\n//   onSubmitForm: PropTypes.func.isRequired,\n//   contacts: PropTypes.array.isRequired,\n// };\n\n// const mapStateToProps = state => ({\n//   contacts: state.contacts.items,\n// });\n// const mapDispatchToProps = dispatch => ({\n//   onSubmitForm: contact => dispatch(addContact(contact)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactsInputForm);\n","import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterContacts } from '../../redux/contacts/contacts-actions';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\nimport style from './Filter.module.scss';\n\n//====================Filter REDUX-HOOKS ===============//\nconst Filter = ({ text }) => {\n  // const filter = useSelector(state => state.contacts.filter);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleInputFindChange = ({ target }) => {\n    const { value } = target;\n    dispatch(filterContacts(value));\n  };\n\n  return (\n    <>\n      <p className={style.title}>{text}</p>\n      <input\n        className={style.input}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleInputFindChange}\n      />\n    </>\n  );\n};\n\nFilter.defaultProps = {\n  text: '',\n  // filter: '',\n};\n\nFilter.propTypes = {\n  text: PropTypes.string,\n  // filter: PropTypes.string,\n  // onInputFindChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n\n//====================Filter REDUX-{ connect } ===============//\n\n// const Filter = ({ text, filter, onInputFindChange }) => {\n//   const handleInputFindChange = ({ target }) => {\n//     const { value } = target;\n//     onInputFindChange(value);\n//   };\n\n//   return (\n//     <>\n//       <p className={style.title}>{text}</p>\n//       <input\n//         className={style.input}\n//         type=\"text\"\n//         name=\"filter\"\n//         value={filter}\n//         onChange={handleInputFindChange}\n//       />\n//     </>\n//   );\n// };\n\n// Filter.defaultProps = {\n//   text: '',\n//   filter: '',\n// };\n\n// Filter.propTypes = {\n//   text: PropTypes.string,\n//   filter: PropTypes.string,\n//   onInputFindChange: PropTypes.func.isRequired,\n// };\n\n// const mapStateToProps = state => ({\n//   filter: state.contacts.filter,\n// });\n// const mapDispatchToProps = dispatch => ({\n//   onInputFindChange: value => dispatch(filterContacts(value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import PropTypes from 'prop-types';\r\n// import { connect } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteContact } from '../../redux/contacts/contacts-actions';\r\nimport Button from 'components/Button';\r\nimport { MdPhoneAndroid } from 'react-icons/md';\r\nimport { createUseStyles } from 'react-jss';\r\n\r\nconst useStyles = createUseStyles({\r\n  item: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    marginBottom: 10,\r\n    fontSize: 18,\r\n    fontWeight: 500,\r\n  },\r\n  name: {\r\n    marginRight: 8,\r\n    marginLeft: 6,\r\n  },\r\n  number: {\r\n    color: 'rgb(79, 119, 238)',\r\n  },\r\n});\r\n\r\n//====================Filter REDUX-HOOKS ===============//\r\n\r\nconst ContactItem = ({ name, number, id }) => {\r\n  const dispatch = useDispatch();\r\n  const hendelDeleteContact = () => dispatch(deleteContact(id));\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <li className={classes.item}>\r\n      <MdPhoneAndroid />\r\n      <span className={classes.name}>{name}:</span>\r\n      <span className={classes.number}>{number}</span>\r\n      <Button title=\"Delete\" onDelete={hendelDeleteContact} />\r\n    </li>\r\n  );\r\n};\r\n\r\nContactItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  // onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactItem;\r\n\r\n//=====================REDUX-{ connect } ===============//\r\n\r\n// const ContactItem = ({ name, number, id, onDelete }) => {\r\n//   const classes = useStyles();\r\n//   return (\r\n//     <li className={classes.item}>\r\n//       <MdPhoneAndroid />\r\n//       <span className={classes.name}>{name}:</span>\r\n//       <span className={classes.number}>{number}</span>\r\n//       <Button title=\"Delete\" id={id} onDelete={onDelete} />\r\n//     </li>\r\n//   );\r\n// };\r\n\r\n// ContactItem.propTypes = {\r\n//   name: PropTypes.string.isRequired,\r\n//   number: PropTypes.string.isRequired,\r\n//   onDelete: PropTypes.func.isRequired,\r\n// };\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onDelete: id => dispatch(deleteContact(id)),\r\n// });\r\n// export default connect(null, mapDispatchToProps)(ContactItem);\r\n","// import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\nimport { useSelector } from 'react-redux';\nimport ContactItem from '../ContactItem';\n// import style from './Contacts.module.scss';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  list: {\n    paddingLeft: 30,\n  },\n});\n\n//====================Contacts REDUX-HOOKS ===============//\n\nconst Contacts = () => {\n  const classes = useStyles();\n\n  // const contacts = useSelector(state => state.contacts.items);\n  // const filter = useSelector(state => state.contacts.filter);\n\n  // const normalizedFilter = filter.toLowerCase();\n  // const visibleContacts = contacts.filter(contact =>\n  //   contact.name.toLowerCase().includes(normalizedFilter),\n  // );\n  const visibleContacts = useSelector(getVisibleContacts);\n\n  return (\n    <ul className={classes.list}>\n      {visibleContacts.map(({ id, name, number }) => (\n        <ContactItem key={id} id={id} name={name} number={number} />\n      ))}\n    </ul>\n  );\n};\n\n// Contacts.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//     }),\n//   ).isRequired,\n// };\n\nexport default Contacts;\n\n//=====================REDUX-{ connect } ===============//\n// const Contacts = ({ contacts }) => {\n//   const classes = useStyles();\n//   return (\n//     <ul className={classes.list}>\n//       {contacts.map(({ id, name, number }) => (\n//         <ContactItem\n//           key={id}\n//           id={id}\n//           name={name}\n//           number={number}\n//           // onDelete={onDelete}\n//         />\n//       ))}\n//     </ul>\n//   );\n// };\n\n// Contacts.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//     }),\n//   ).isRequired,\n// };\n\n// const visibleContacts = (contactsArray, filterValue) => {\n//   const normalizedFilter = filterValue.toLowerCase();\n//   return contactsArray.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n// const mapStateToProps = state => ({\n//   contacts: visibleContacts(state.contacts.items, state.contacts.filter),\n//   // contacts: state.contacts.items,// все контакты, если не использовать фильтрацию\n// });\n\n// export default connect(mapStateToProps)(Contacts);\n","import PropTypes from 'prop-types';\r\n// import style from './Notification.module.scss';\r\nimport { createUseStyles } from 'react-jss';\r\n\r\nconst useStyles = createUseStyles({\r\n  title: {\r\n    marginTop: 20,\r\n    fontSize: 20,\r\n    color: 'red',\r\n  },\r\n});\r\n\r\nconst Notification = ({ message }) => {\r\n  const classes = useStyles();\r\n  // return <p className={style.title}>{message}</p>;\r\n  return <p className={classes.title}>{message}</p>;\r\n};\r\n\r\nNotification.defaultProps = {\r\n  message: '',\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n\r\nexport default Notification;\r\n","// import { useState, useEffect } from 'react';\n// import { connect } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport Section from 'components/Section';\nimport ContactsInputForm from 'components/ContactsInputForm';\nimport Filter from 'components/Filter';\nimport Contacts from 'components/Contacts';\nimport Notification from 'components/Notification';\nimport { getContacts } from 'redux/contacts/contacts-selectors';\n\n//====================ContactsPage REDUX-HOOKS ===============//\n\nconst App = () => {\n  // const contacts = useSelector(state => state.contacts.items);\n  const contacts = useSelector(getContacts);\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <ContactsInputForm />\n      </Section>\n      <Section title=\"Contacts\">\n        {contacts.length > 0 ? (\n          <>\n            <Filter text=\"Find contacts by name\" />\n            <Contacts />\n          </>\n        ) : (\n          <Notification message=\"No contacts\" />\n        )}\n      </Section>\n    </>\n  );\n};\n\nexport default App;\n\n// //====================ContactsPage REDUX-{ connect } ===============//\n\n// const App = ({ contacts }) => {\n//   // const [contacts, setContacts] = useState(  //--------------\n//   //   JSON.parse(window.localStorage.getItem('contacts')) ?? [],\n//   // );\n//   // const [filter, setFilter] = useState('');//------\n\n//   // const handleSubmitForm = contact => {//--------\n//   // setContacts(prevState => [contact, ...prevState]);\n//   // setFilter('');\n//   // };\n\n//   // const handleFilter = value => setFilter(value.trim());//----\n\n//   // const handleVisibleContacts = () => {//----------\n//   //   const normalizedFilter = filter.toLowerCase();\n//   //   return contacts.filter(contact =>\n//   //     contact.name.toLowerCase().includes(normalizedFilter),\n//   //   );\n//   // };\n\n//   // const handleDeleteContact = id =>//---------\n//   //   setContacts(prevState => prevState.filter(contact => contact.id !== id));//-----\n\n//   // componentdidMount\n\n//   // useEffect(() => {\n//   //   setContacts(JSON.parse(window.localStorage.getItem('contacts')) ?? []);\n//   // }, []); // []-запускается только при первом рендере и больше никогда,\n//   // если не добавить условие( ?? []),\n//   // то при отсутствии localStorage запишет null в setContacts, что вызовет ошибку\n\n//   // componentdidUpdate\n//   // useEffect(() => {\n//   //   window.localStorage.setItem('contacts', JSON.stringify(contacts));\n//   // }, [contacts]); // [contacts]-запускается при изменении contacts\n\n//   return (\n//     <>\n//       <Section title=\"Phonebook\">\n//         <ContactsInputForm\n//         // contacts={contacts}\n//         // onSubmitForm={handleSubmitForm}\n//         />\n//       </Section>\n//       <Section title=\"Contacts\">\n//         {contacts.length > 0 ? (\n//           <>\n//             <Filter\n//               text=\"Find contacts by name\"\n//               // filter={filter}\n//               // onInputFindChange={handleFilter}\n//             />\n//             <Contacts\n//             // contacts={handleVisibleContacts()}\n//             // onDelete={handleDeleteContact}\n//             />\n//           </>\n//         ) : (\n//           <Notification message=\"No contacts\" />\n//         )}\n//       </Section>\n//     </>\n//   );\n// };\n\n// const mapStateToProps = state => ({\n//   contacts: state.contacts.items,\n// });\n\n// export default connect(mapStateToProps)(App);\n","// import { combineReducers } from 'redux';\nimport { createReducer, combineReducers } from '@reduxjs/toolkit';\nimport {\n  addContact,\n  filterContacts,\n  deleteContact,\n} from '../../redux/contacts/contacts-actions';\n\n// import {\n//   ADD_CONTACTS,\n//   DELETE_CONTACTS,\n//   FILTER_CONTACTS,\n// } from './contacts-types';\n\n// const initialState = JSON.parse(window.localStorage.getItem('contacts')) ?? [];\nconst initialState = [];\nconst items = createReducer(initialState, {\n  [addContact]: (state, action) => [...state, action.payload],\n  [deleteContact]: (state, action) =>\n    state.filter(({ id }) => id !== action.payload),\n});\nconst filter = createReducer('', {\n  [filterContacts]: (state, action) => action.payload.trim(),\n});\n\n// const items = (state = initialState, { type, payload }) => {\n//   switch (type) {\n//     case ADD_CONTACTS:\n//       return [...state, payload];\n\n//     case DELETE_CONTACTS:\n//       return state.filter(({ id }) => id !== payload);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case FILTER_CONTACTS:\n//       return payload.trim();\n//     // return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","// import { createStore, combineReducers } from 'redux';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n// import contactsReducer from './contacts/contacts-reducer';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  version: 1,\n  storage,\n  blacklist: ['filter'], // filter will not be persisted or whitelist: ['contacts'] --only contacts will be persisted\n};\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n\n// const persistedReducer = persistReducer(contactsPersistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER], // for not warning console\n    },\n  }),\n  // devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n\n// const store = createStore(rootReducer, composeWithDevTools()); // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n\n// export default store;\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\n\nReactDOM.render(\n  <StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}