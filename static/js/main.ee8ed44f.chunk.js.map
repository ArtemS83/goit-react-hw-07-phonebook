{"version":3,"sources":["components/Section/Section.module.scss","components/ContactsInputForm/ContactsInputForm.module.scss","components/Button/Button.module.scss","components/Filter/Filter.module.scss","components/Section/Section.jsx","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/Button/Button.jsx","components/ContactsInputForm/ContactsInputForm.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.jsx","components/Contacts/Contacts.jsx","components/Notification/Notification.jsx","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","Section","title","children","className","style","section","card","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContacts","axios","defaults","baseURL","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","getIsLoadingSelector","loading","Button","type","onDelete","buttonButton","button","onClick","defaultProps","ContactsInputForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","handleInputChange","target","value","form","onSubmit","e","preventDefault","normalizedName","trim","find","swal","post","then","data","catch","error","addContact","alert","label","pattern","required","placeholder","onChange","Filter","text","input","useStyles","createUseStyles","item","display","alignItems","marginBottom","fontSize","fontWeight","marginRight","marginLeft","color","ContactItem","id","classes","delete","deleteContact","list","paddingLeft","Contacts","visibleContacts","map","marginTop","Notification","message","App","useEffect","get","isLoading","height","width","visible","length","createReducer","_","action","payload","combineReducers","store","configureStore","reducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ee8ed44f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__3lHQ_\",\"card\":\"Section_card__37UB9\",\"title\":\"Section_title__3jDVk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactsInputForm_form__pUsVY\",\"label\":\"ContactsInputForm_label__3JQ1o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3v4S-\",\"buttonButton\":\"Button_buttonButton__3qZzi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Filter_title__1i5dV\",\"input\":\"Filter_input__1X_zS\"};","import PropTypes from 'prop-types';\nimport style from './Section.module.scss';\n\nconst Section = ({ title, children }) => {\n  return (\n    <div className={style.section}>\n      <div className={style.card}>\n        <h2 className={style.title}>{title}</h2>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\nexport default Section;\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactRequest',\n);\nexport const fetchContactsSuccess = createAction(\n  'contacts/fetchContactSuccess',\n);\nexport const fetchContactsError = createAction('contacts/fetchContactError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/adeleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const filterContacts = createAction('contacts/filter');\n","import axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from '../../redux/contacts/contacts-actions';\n\naxios.defaults.baseURL = 'http://localhost:4040';\n\nexport const fetchContacts = () => dispatch => {\n  dispatch(fetchContactsRequest());\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n    .catch(error => dispatch(fetchContactsError(error)));\n};\n\nexport const addContact = (name, number) => dispatch => {\n  const contact = {\n    name,\n    number,\n  };\n  dispatch(addContactRequest());\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n    .catch(error => dispatch(addContactError(error)));\n};\n\nexport const deleteContact = id => dispatch => {\n  dispatch(deleteContactRequest());\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch(error => dispatch(deleteContactError(error)));\n};\n","// import { createSelector } from 'reselect';\nimport { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\nexport const getIsLoadingSelector = state => state.contacts.loading;\n\n// export const getVisibleContacts = state => {\n//   const contacts = getContacts(state);\n//   const filter = getFilter(state);\n//   const normalizedFilter = filter.toLowerCase();\n\n//   return contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n","import PropTypes from 'prop-types';\nimport style from './Button.module.scss';\n\nconst Button = ({ title, type, onDelete }) => {\n  return (\n    <button\n      className={type === 'button' ? style.buttonButton : style.button}\n      type={type}\n      onClick={onDelete}\n    >\n      {title}\n    </button>\n  );\n};\n\nButton.defaultProps = {\n  title: 'button',\n  type: 'button',\n  onDelete: () => {},\n};\n\nButton.propTypes = {\n  title: PropTypes.string,\n  type: PropTypes.string,\n  onDelete: PropTypes.func,\n};\n\nexport default Button;\n","import { useState } from 'react';\n// import { connect } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\n// import { addContact } from '../../redux/contacts/contacts-actions';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\n// import PropTypes from 'prop-types';\n// import { v4 as uuid } from 'uuid';\nimport swal from 'sweetalert';\nimport Button from '../Button';\nimport style from './ContactsInputForm.module.scss';\n\n//====================ContactsInputForm REDUX-HOOKS ===============//\n\nconst ContactsInputForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n\n  const dispatch = useDispatch();\n  const handleInputChange = ({ target }) => {\n    const { value, name } = target;\n    name === 'name' ? setName(value) : setNumber(value);\n  };\n\n  const handleAddContact = e => {\n    e.preventDefault();\n\n    if (!number || !name) {\n      alert(`Name or Number not entered `);\n      return;\n    }\n\n    const normalizedName = name.toLowerCase().trim();\n    const isExistingUser = contacts.find(\n      contact => contact.name.toLowerCase() === normalizedName,\n    );\n\n    if (isExistingUser) {\n      // alert(`${name} is already in contacts`);\n      swal('Warning!', `${name} is already in contacts!`, 'warning');\n      return;\n    }\n\n    dispatch(addContact(name, number));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={style.form} onSubmit={handleAddContact}>\n      <label className={style.label}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          placeholder=\"Enter contact\"\n          onChange={handleInputChange}\n        />\n      </label>\n      <label className={style.label}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n          title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n          required\n          placeholder=\"Enter number phone\"\n          onChange={handleInputChange}\n        />\n      </label>\n      <Button title=\"Add contact\" type=\"submit\" />\n    </form>\n  );\n};\n\n// ContactsInputForm.propTypes = {\n//   onSubmitForm: PropTypes.func.isRequired,\n//   contacts: PropTypes.array.isRequired,\n// };\n\nexport default ContactsInputForm;\n\n//=====================REDUX-{ connect } ===============//\n\n// const ContactsInputForm = ({ contacts, onSubmitForm }) => {\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n\n//   const handleInputChange = ({ target }) => {\n//     const { value, name } = target;\n//     name === 'name' ? setName(value) : setNumber(value);\n//   };\n\n//   const handleAddContact = e => {\n//     e.preventDefault();\n//     if (!number || !name) {\n//       alert(`Name or Number not entered `);\n//       return;\n//     }\n\n//     const normalizedName = name.toLowerCase().trim();\n//     const isExistingUser = contacts.find(\n//       contact => contact.name.toLowerCase() === normalizedName,\n//     );\n\n//     if (isExistingUser) {\n//       alert(`${name} is already in contacts`);\n//       return;\n//     }\n//     // const newContact = {\n//     //   id: uuid(),\n//     //   name,\n//     //   number,\n//     // };\n//     // onSubmitForm(newContact);\n\n//     onSubmitForm({ name, number });\n//     setName('');\n//     setNumber('');\n//   };\n\n//   return (\n//     <form className={style.form} onSubmit={handleAddContact}>\n//       <label className={style.label}>\n//         Name\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           value={name}\n//           placeholder=\"Enter contact\"\n//           onChange={handleInputChange}\n//         />\n//       </label>\n//       <label className={style.label}>\n//         Number\n//         <input\n//           type=\"tel\"\n//           name=\"number\"\n//           value={number}\n//           placeholder=\"Enter number phone\"\n//           onChange={handleInputChange}\n//         />\n//       </label>\n//       <Button title=\"Add contact\" type=\"submit\" />\n//     </form>\n//   );\n// };\n\n// ContactsInputForm.propTypes = {\n//   onSubmitForm: PropTypes.func.isRequired,\n//   contacts: PropTypes.array.isRequired,\n// };\n\n// const mapStateToProps = state => ({\n//   contacts: state.contacts.items,\n// });\n// const mapDispatchToProps = dispatch => ({\n//   onSubmitForm: contact => dispatch(addContact(contact)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactsInputForm);\n","import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterContacts } from '../../redux/contacts/contacts-actions';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\nimport style from './Filter.module.scss';\n\n//====================Filter REDUX-HOOKS ===============//\nconst Filter = ({ text }) => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleInputFindChange = ({ target }) => {\n    const { value } = target;\n    dispatch(filterContacts(value));\n  };\n\n  return (\n    <>\n      <p className={style.title}>{text}</p>\n      <input\n        className={style.input}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleInputFindChange}\n      />\n    </>\n  );\n};\n\nFilter.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default Filter;\n\n//====================Filter REDUX-{ connect } ===============//\n\n// const Filter = ({ text, filter, onInputFindChange }) => {\n//   const handleInputFindChange = ({ target }) => {\n//     const { value } = target;\n//     onInputFindChange(value);\n//   };\n\n//   return (\n//     <>\n//       <p className={style.title}>{text}</p>\n//       <input\n//         className={style.input}\n//         type=\"text\"\n//         name=\"filter\"\n//         value={filter}\n//         onChange={handleInputFindChange}\n//       />\n//     </>\n//   );\n// };\n\n// Filter.defaultProps = {\n//   text: '',\n//   filter: '',\n// };\n\n// Filter.propTypes = {\n//   text: PropTypes.string,\n//   filter: PropTypes.string,\n//   onInputFindChange: PropTypes.func.isRequired,\n// };\n\n// const mapStateToProps = state => ({\n//   filter: state.contacts.filter,\n// });\n// const mapDispatchToProps = dispatch => ({\n//   onInputFindChange: value => dispatch(filterContacts(value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/contacts-operations';\nimport Button from 'components/Button';\nimport { MdPhoneAndroid } from 'react-icons/md';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  item: {\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: 10,\n    fontSize: 18,\n    fontWeight: 500,\n  },\n  name: {\n    marginRight: 8,\n    marginLeft: 6,\n  },\n  number: {\n    color: 'rgb(79, 119, 238)',\n  },\n});\n\n//====================Filter REDUX-HOOKS ===============//\n\nconst ContactItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  const hendelDeleteContact = () => dispatch(deleteContact(id));\n\n  const classes = useStyles();\n  return (\n    <li className={classes.item}>\n      <MdPhoneAndroid />\n      <span className={classes.name}>{name}:</span>\n      <span className={classes.number}>{number}</span>\n      <Button title=\"Delete\" onDelete={hendelDeleteContact} />\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n\n//=====================REDUX-{ connect } ===============//\n\n// const ContactItem = ({ name, number, id, onDelete }) => {\n//   const classes = useStyles();\n//   return (\n//     <li className={classes.item}>\n//       <MdPhoneAndroid />\n//       <span className={classes.name}>{name}:</span>\n//       <span className={classes.number}>{number}</span>\n//       <Button title=\"Delete\" id={id} onDelete={onDelete} />\n//     </li>\n//   );\n// };\n\n// ContactItem.propTypes = {\n//   name: PropTypes.string.isRequired,\n//   number: PropTypes.string.isRequired,\n//   onDelete: PropTypes.func.isRequired,\n// };\n\n// const mapDispatchToProps = dispatch => ({\n//   onDelete: id => dispatch(deleteContact(id)),\n// });\n// export default connect(null, mapDispatchToProps)(ContactItem);\n","// import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\nimport { useSelector } from 'react-redux';\nimport ContactItem from '../ContactItem';\n// import style from './Contacts.module.scss';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  list: {\n    paddingLeft: 30,\n  },\n});\n\n//====================Contacts REDUX-HOOKS ===============//\n\nconst Contacts = () => {\n  const classes = useStyles();\n\n  const visibleContacts = useSelector(getVisibleContacts);\n\n  return (\n    <ul className={classes.list}>\n      {visibleContacts.map(({ id, name, number }) => (\n        <ContactItem key={id} id={id} name={name} number={number} />\n      ))}\n    </ul>\n  );\n};\n\n// Contacts.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//     }),\n//   ).isRequired,\n// };\n\nexport default Contacts;\n\n//=====================REDUX-{ connect } ===============//\n// const Contacts = ({ contacts }) => {\n//   const classes = useStyles();\n//   return (\n//     <ul className={classes.list}>\n//       {contacts.map(({ id, name, number }) => (\n//         <ContactItem\n//           key={id}\n//           id={id}\n//           name={name}\n//           number={number}\n//           // onDelete={onDelete}\n//         />\n//       ))}\n//     </ul>\n//   );\n// };\n\n// Contacts.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//     }),\n//   ).isRequired,\n// };\n\n// const visibleContacts = (contactsArray, filterValue) => {\n//   const normalizedFilter = filterValue.toLowerCase();\n//   return contactsArray.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n// const mapStateToProps = state => ({\n//   contacts: visibleContacts(state.contacts.items, state.contacts.filter),\n//   // contacts: state.contacts.items,// все контакты, если не использовать фильтрацию\n// });\n\n// export default connect(mapStateToProps)(Contacts);\n","import PropTypes from 'prop-types';\n// import style from './Notification.module.scss';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  title: {\n    marginTop: 20,\n    fontSize: 20,\n    color: 'red',\n  },\n});\n\nconst Notification = ({ message }) => {\n  const classes = useStyles();\n  // return <p className={style.title}>{message}</p>;\n  return <p className={classes.title}>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Loader from 'react-loader-spinner';\nimport Section from 'components/Section';\nimport ContactsInputForm from 'components/ContactsInputForm';\nimport Filter from 'components/Filter';\nimport Contacts from 'components/Contacts';\nimport Notification from 'components/Notification';\nimport {\n  getContacts,\n  getIsLoadingSelector,\n} from 'redux/contacts/contacts-selectors';\nimport { fetchContacts } from './redux/contacts/contacts-operations';\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, []);\n\n  const contacts = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoadingSelector);\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <ContactsInputForm />\n      </Section>\n      <Section title=\"Contacts\">\n        {/* {isLoading && <h1>Загружаем...</h1>} */}\n        <Loader\n          type=\"Puff\"\n          color=\"#000\"\n          height={70}\n          width={70}\n          visible={isLoading}\n        />\n        {contacts.length > 0 ? (\n          <>\n            <Filter text=\"Find contacts by name\" />\n            <Contacts />\n          </>\n        ) : (\n          <Notification message=\"No contacts\" />\n        )}\n      </Section>\n    </>\n  );\n};\n\nexport default App;\n","import { createReducer, combineReducers } from '@reduxjs/toolkit';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  filterContacts,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from '../../redux/contacts/contacts-actions';\n\n// const initialState = JSON.parse(window.localStorage.getItem('contacts')) ?? [];\nconst initialState = [];\nconst items = createReducer(initialState, {\n  [fetchContactsSuccess]: (_, action) => action.payload,\n  [addContactSuccess]: (state, action) => [...state, action.payload],\n  [deleteContactSuccess]: (state, action) =>\n    state.filter(({ id }) => id !== action.payload),\n});\n\nconst filter = createReducer('', {\n  [filterContacts]: (_, action) => action.payload.trim(),\n});\n\nconst loading = createReducer(false, {\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n});\n","// import { createStore, combineReducers } from 'redux';\n\nimport {\n  createReducer,\n  configureStore,\n  getDefaultMiddleware,\n  combineReducers,\n} from '@reduxjs/toolkit';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n// import contactsReducer from './contacts/contacts-reducer';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './contacts/contacts-reducer';\n\n// const contactsPersistConfig = {\n//   key: 'contacts',\n//   version: 1,\n//   storage,\n//   blacklist: ['filter'], // filter will not be persisted or whitelist: ['contacts'] --only contacts will be persisted\n// };\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n\n// const persistedReducer = persistReducer(contactsPersistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: {\n    // contacts: persistReducer(contactsPersistConfig, contactsReducer),\n    contacts: contactsReducer,\n  },\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER], // for not warning console\n    },\n  }),\n  // devTools: process.env.NODE_ENV === 'development',\n});\n\n//=============================\n// const persistor = persistStore(store);\n\n// export default { store, persistor };\n\n// const store = createStore(rootReducer, composeWithDevTools()); // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n\nexport default store;\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\n\nReactDOM.render(\n  <StrictMode>\n    {/* <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}> */}\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}